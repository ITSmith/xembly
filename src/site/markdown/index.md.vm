# Assembly for XML

Xembly is an imperative language for data manipulations in
an XML document. It is a much simplier alternative to
[XSLT](http://www.w3.org/TR/xslt) and [XQuery](http://www.w3.org/TR/xquery).
Read this blog post for a more detailed explanation:
[Xembly, an Assembly for XML](http://www.yegor256.com/2014/04/09/xembly-intro.html).

This is a sample Xembly script:

```
XPATH '/root';
ADDIF 'orders';
ADD 'order';
ATTR 'id', '55';
ADD 'amount';
SET '29.99';
UP;
ADD "summary";
SET "free &quot;subscription&quot;";
```

Will transform `<root/>` into:

```xml
<root>
  <orders>
    <order id="55">
      <amount>29.99</amount>
      <summary>free "subscription"</summary>
    </order>
  </orders>
</root>
```

Xembly program (similar to Assembly program) consists of "directives". Each
directive may have a few or zero arguments. Every directive is executed at
current node(s). Program starts at the `Document` as the only current node.

Arguments may be wrapped into single or double quotes.

The only dependency you need is:

```xml
<dependency>
  <groupId>${project.groupId}</groupId>
  <artifactId>${project.artifactId}</artifactId>
  <version>${project.version}</version>
</dependency>
```

Directives
----------

Full list of supported directives in the current version:

`ADD` directive adds a new node to every node in the current node set.
`ADD` expects exactly one mandatory argument, which is the name of
a new node to be added (case sensitive):

```
ADD 'orders';
ADD 'order';
```

Even if the node with the same name already exists, a new node
will be added. Use `ADDIF` if you need to add only if the same-name node
is absent.

After execution, `ADD` directive changes current nodes to the nodes just
added.

`ADDIF` directive adds a new node to every node of the current set,
only if it's absent. `ADDIF` expects exactly one argument, which
is the name of the node to be added (case sensitive):

```
ADD 'orders';
ADDIF 'order';
```

After execution, `ADDIF` directive changes current nodes to the ones just
added.

`SET` changes text content of all current nodes, and expects
exactly one argument, which is the text content to set:

```
ADD "employee";
SET "John Smith";
```

`XSET` changes text content of all current nodes to a value
calculated with XPath expression:

```
ADD "product-1";
ADD "price";
XSET "sum(/products/price) div count(/products)";
```

`UP` moves all current nodes to their parents.

`XPATH` changes current nodes to the all found by XPath expression:

```
XPATH "//employee[@id='234' and name='John Smith']/name";
SET "John R. Smith";
```

`REMOVE` removes current nodes and jumps to their parents:

```
ADD "employee";
REMOVE;
```

`STRICT` checks that there is certain number of current nodes:

```
XPATH "/root/employee[name='John Doe']";
STRICT "1";
```

`PI` directive add a new processing directive to the XML:

```
PI "xsl-stylesheet" "href='http://example.com'";
```

`PUSH` and `POP` directives saves current DOM position to stack
and restores it from there, see [this example](./example-push-and-pop.html).

Known Limitations
-----------------

Xembly is not intended to be a replacement of XSL or XQuery. It is
a lightweight (!) instrument for XML manipulations. There are a few things
that can't be done by means of Xembly:

 * You can't add, remove, or modify XML comments
   (but you can find them with XPath)

 * DTD section can't be modified

 * Namespaces are not supported (should be fixed soon)

 * Elements and text content can't be mixed, e.g.
   this structure is not supported: `<test>hello <b>friend</a></test>`

Some of these limitations may be removed in the next versions. Please,
submit a request to our
[issue tracker in Github](https://github.com/yegor256/xembly/issues).
